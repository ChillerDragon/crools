#!/bin/bash
# crapshot - take screenshot and scp it to your fav zzh remote
#
# DEPENDENCYS:
# install maim
# install xsel
# install say
# make sure the first zzh host has permission
# in /var/www/html/cs
# on zzh host 1 do:
# mkdir /var/www/html/cs
# chown -R /var/www/html/cs zzh1:zzh1
conf_dir=~/.config/crools
conf=~/.config/crools/zzh.cnf
picdir=/var/www/html/cs
histfile="$conf_dir/crapshot_history"
histsize=5

function is_arch() {
    if [ -f /etc/arch-release ] && uname -r | grep -q arch
    then
        return 0
    fi
    return 1
}
function is_apple() {
    if [[ "$OSTYPE" == "darwin"* ]]
    then
        return 0
    fi
    return 1
}
function install_tool() {
    local tool
    local pckmn
    tool="$1"
    if [ -x "$(command -v "$1")" ]
    then
        return
    fi
    if is_apple
    then
        brew install "$tool" || exit 1
    else
        if is_arch
        then
            pckmn="pacman -Sy"
        else
            pckmn="apt install"
        fi
        if [ "$UID" == "0" ]
        then
            eval "$pckmn $tool" || exit 1
        else
            if [ -x "$(command -v sudo)" ]
            then
                eval "sudo $pckmn $tool" || exit 1
            else
                echo "[!] Error: install sudo"
                exit 1
            fi
        fi
    fi
}
function screenshot() {
    local file
    file="$1"
    if [ "$2" == "-s" ]
    then
        if [ -x "$(command -v maim)" ]
        then
            if ! maim --select "$file"
            then
                return 1
            fi
            return 0
        elif [ -x "$(command -v gnome-screenshot)" ]
        then
            gnome-screenshot --area --file "$file"
            return 0
        else
            echo "no screenshot tool found"
            return 1
        fi
    else
        if [ -x "$(command -v maim)" ]
        then
            if ! maim "$file"
            then
                return 1
            fi
            return 0
        elif [ -x "$(command -v gnome-screenshot)" ]
        then
            gnome-screenshot --file "$file"
            return 0
        else
            echo "no screenshot tool found"
            return 1
        fi
    fi
    return 0
}
function os_copy() {
    if is_apple
    then
        echo "$1" | pbcopy
    else
        echo "$1" | xsel -ib
    fi
}
function os_say() {
    if [ -x "$(command -v say)" ]
    then
        say "$1"
    elif [ -x "$(command -v espeak)" ]
    then
        espeak "$1"
    elif [ -x "$(command -v spd-say)" ]
    then
        spd-say "$1"
    elif [ -x "$(command -v festival)" ]
    then
        echo "$1" | festival --tts
    else
        echo "Error: no text to speech tool found"
    fi
}
function edit_cnf() {
    if [ ! -f $conf ]
    then
        echo "Error: could not edit config (not found)."
        exit 1
    fi
    crools_find_editor $conf || { echo "Error: failed to edit config"; exit 1; }
}
function check_conf() {
    if [ ! -f $conf ]
    then
        echo "config file not found!"
        echo "Do you want to create one? [y/N]"
        read -r -n 1 yn
        echo ""
        if [[ ! "$yn" =~ [yY] ]]
        then
            return
        fi
        mkdir -p $conf_dir
        {
            echo "# zzh - config"
            echo "# store your fav ssh commands here"
            echo "ssh crools@localhost"
            echo "ssh chillerdragon@149.202.127.134"
        } > $conf
        edit_cnf
    fi
}
if [ ! -x "$(command -v gnome-screenshot)" ]
then
    install_tool maim
fi
if [ "$1" == "--help" ] || [ "$1" == "-h" ]
then
    echo "usage: $(basename "$0") [--edit|--select|--no-browser|--list|--file <filepath>]"
    echo "description: upload screenshots via scp"
    echo "exmaple: $(basename "$0") -s --no-browser"
    exit 0
elif [ "$1" == "--edit" ] || [ "$1" == "-e" ]
then
    edit_cnf
    exit 0
fi

check_conf
if [ ! -f $conf ]
then
    echo "Error: config missing"
    exit 1
fi

function add_history() {
    local filename
    filename="$1"
    if [ -f "$histfile" ]
    then
        tail -n "$((histsize-1))" "$histfile" > "$histfile.tmp" || exit 1
        mv "$histfile.tmp" "$histfile" || exit 1
    fi
    echo "$filename" >> "$histfile"
}

function delete_history() {
    if [ ! -f "$histfile" ]
    then
        echo "Error there is no history yet"
        exit 1
    fi
    if [ "$(wc -l "$histfile" | cut -d' ' -f 1)" == "0" ]
    then
        echo "Error history is empty"
        exit 1
    fi
    PS3='Pick picture to be deleted (1=latest): '
    select pic in $(
        tac "$histfile" | while read -r line;
        do
            if [[ "$line" =~ .*\.png$ ]]
            then
                echo "https://$host/cs/$line"
            fi
        done
    )
    do
        if [ "$pic" == "" ]
        then
            echo "invalid option"
        else
            if [[ "$pic" =~ $host/cs/(.*).png$ ]]
            then
                pic="${BASH_REMATCH[1]}.png"
            else
                echo "Error: failed to parse pic name '$pic'"
                exit 1
            fi
            echo "deleting '$pic' ..."
            cmd="ssh $remote \"rm -f $picdir/$pic\""
            echo "$cmd"
            eval "$cmd"
            grep -v "$pic" "$histfile" > "$histfile".tmp
            mv "$histfile".tmp "$histfile"
            exit 0
        fi
    done
}

function list_all() {
    cmd="ssh $remote \"ls -a $picdir\""
    echo "$cmd"
    eval "$cmd" | while read -r line;
    do
        if [[ "$line" =~ .*\.png$ ]]
        then
            echo "https://$host/cs/$line"
        fi
    done
    exit 0
}

while IFS= read -r line
do
    if [ "${line:0:1}" == "#" ]
    then
        continue
    fi
    remote="$(echo "$line" | cut -d' ' -f2)"
    host="$(echo "$remote" | cut -d'@' -f2)"
    ts="$(date +%s)"
    picname="crapshot_$ts.png"
    picpath="/tmp/$picname"
    break
done < $conf

if [ "$1" == "--delete" ]
then
    delete_history
    exit 0
elif [ "$1" == "--list" ]
then
    list_all
    exit 0
elif [ "$1" == "--file" ]
then
    shift
    inputfile="$1"
    shift
    if [ ! -f "$inputfile" ]
    then
        echo "Error file '$inputfile' not found."
        exit 1
    fi
    cp "$inputfile" "$picpath" || exit 1
elif [ "$1" == "-s" ] || [ "$1" == "--select" ]
then
    shift
    os_say "select" &
    if ! screenshot "$picpath" -s
    then
        os_say "abort"
        echo "crapshot aborted."
        exit 1
    fi
else
    if ! screenshot "$picpath"
    then
        say "failed"
        echo "crapshot failed."
        exit 1
    fi
fi
os_copy "crapshot in progress"
os_say crapshot
cmd="scp $picpath $remote:$picdir/.$ts.png"
echo "$cmd"
eval "$cmd"
add_history ".$ts.png"
url="https://$host/cs/.$ts.png"
echo "$url"
os_copy "$url"
if [ "$1" == "--no-browser" ]
then
    exit 0
fi
if [ "$BROWSER" != "" ]
then
    $BROWSER "$url" &
elif [ "$(uname)" == "Darwin" ]
then
    open -a Safari "$url"
else
    firefox "$url" &
fi

