#!/bin/bash

RESET="\e[0m"
GREEN="\e[1;32m"
RED="\033[1;91m"
BG_RED="\033[0;101m"

errors=0

err() {
	local msg="$1"
	printf '%b%s%b%b%s%b\n' "$BG_RED" "[ERROR]" "$RESET" "$RED" "$msg" "$RESET"
	errors="$((errors+1))"
}

fatal() {
	local msg="$1"
	printf '❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌\n'
	printf '%b%s%b%b%s%b\n' "$BG_RED" "[FATAL FAILURE]" "$RESET" "$RED" " Error: $msg" "$RESET"
	printf '❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌\n'
	exit 1
}

success() {
	local msg="$1"
	printf "\n%b%s%b\n" "$GREEN" "$msg" "$RESET"
}

ok() {
	local msg="$1"
	printf "%s .. %bOK%b\n" "$msg" "$GREEN" "$RESET"
}

check_dir() {
	local dir="$1"
	if [ ! -d "$dir" ]
	then
		echo "Error: $dir dir not found!"
		echo "       make sure you are at the root of a ddnet repo"
		exit 1
	fi
}

check_bin() {
	local bin="$1"
	if [ ! -x "$(command -v "$bin")" ]
	then
		echo "Error: you need $bin installed in your PATH"
		exit 1
	fi
}

check_dir .git
check_dir cmake
check_dir src

check_bin clang-tidy
check_bin clang
check_bin ninja
check_bin cmake

ddproto_tests() {
	check_dir .git
	check_dir cmake
	check_dir src
	if [ ! -f CMakeLists.txt ]
	then
		echo "Error: CMakeLists.txt not found!"
		echo "       make sure your are at the root of a ddnet_protocol repo"
		return 1
	fi

	mkdir -p build
	cd build || return 1

	cmake .. -DCMAKE_TESTING_ENABLED=ON || return 1
	GTEST_BRIEF=1 make run_tests -j12 || return 1

	cd .. || return 1
	return 0
}

ddproto_ctidy() {
	check_dir .git
	check_dir cmake
	check_dir src
	if [ ! -f CMakeLists.txt ]
	then
		echo "Error: CMakeLists.txt not found!"
		echo "       make sure your are at the root of a ddnet repo"
		return 1
	fi

	mkdir -p build-tidy
	cd build-tidy || return 1

	cmake -G Ninja \
		-DCMAKE_CXX_CLANG_TIDY="clang-tidy;-warnings-as-errors=*" \
		-DCMAKE_C_CLANG_TIDY="clang-tidy;-warnings-as-errors=*" \
		-DCMAKE_BUILD_TYPE=Debug \
		-Werror=dev .. || return 1

        cmake --build . --config Debug || return 1
	cd .. || return 1
	return 0
}

ddproto_compile_docs() {
	check_dir docs
	check_dir include

	cd build || exit 1
	make || exit 1
	cd .. || exit 1

	export C_INCLUDES
	# shellcheck disable=SC2012
	if ! C_INCLUDES="$(ls include/ddnet_protocol/ | awk '{ print "ddnet_protocol/" $0 }' | tr '\n' ',')"
	then
		fatal "failed to collect ddnet_protocol header files"
	fi
	C_INCLUDES+=stdint.h,stddef.h,stdbool.h
	CFLAGS="-DCODE_SPACE=USER_SPACE" \
		LDLIBS="-I$(pwd)/include -L$(pwd)/build -lddnet_protocol" \
		lintdown.sh docs/*.md --skip-pattern 'typedef (enum|struct) {' --wrap-main || return 1
	return 0
}

ddproto_compile_readme() {
	check_dir docs
	check_dir include

	cd build || exit 1
	make || exit 1
	cd .. || exit 1

	CFLAGS="-DCODE_SPACE=USER_SPACE" \
		LDLIBS="-I$(pwd)/include -L$(pwd)/build -lddnet_protocol" \
		lintdown.sh README.md || return 1
	return 0
}

ddproto_compile_examples() {
	check_dir docs
	check_dir include

	mkdir -p build-examples || exit 1
	cd build-examples || exit 1
	cmake .. -DEXAMPLES=ON || exit 1
	make || exit 1

        ./examples/huffman || return 1
        if [ "$(./examples/huffman)" != foo ]
	then
		printf 'Error: expected "foo" but got ^\n';
		cd .. || exit 1
		retrun 1;
	fi

	cd .. || exit 1
	return 0
}

install_typo_checker() {
	[ -x "$(command -v typos)" ] && return

	cargo install typos-cli || exit 1
}

install_typo_checker

echo "ddnet_protocol lib code base linter"
echo "runs similiar stuff like the CI"

./scripts/fix_style.sh --dry-run || fatal style
ok "clang format"
./scripts/check_standard_headers.sh || fatal "standard headers"
ok "standard headers"
./scripts/check_public_headers.sh || fatal "public headers"
ok "public headers"
./scripts/check_types.sh || fatal "C types"
ok "C types"
./scripts/docs.rb --dry-run || fatal "generate docs"
ok "generate docs"
ddproto_compile_docs || fatal "compile docs C code"
ok "compile docs C code"
ddproto_compile_readme || fatal "compile README examples"
ok "compile README examples"
ddproto_compile_examples || fatal "compile examples"
ok "compile examples"
typos . || fatal "typos"
ok "typos"
ddproto_ctidy || fatal ctidy
ok "clang tidy"
ddproto_tests || fatal tests
ok "tests"

if [ "$errors" -eq "0" ]
then
	success "✅ all tests passed."
else
	fatal "There are $errors failures"
fi

