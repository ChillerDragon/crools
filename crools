#!/bin/bash

function err() {
    echo "[-] $1"
}
function log() {
    echo "[*] $1"
}
function suc() {
    echo "[+] $1"
}
function wrn() {
    echo "[!] $1"
}

function git_save_pull() {
    local repo
    repo=${1:-crools}
    if [ "$(git status | tail -n1)" != "nothing to commit, working tree clean" ]
    then
        echo "WARNING: git pull failed! Is your $repo working tree clean?"
        return
    fi
	echo "[*] updating $repo ..."
    git pull
}
function is_func() {
    declare -f -F "$1" > /dev/null
    return $?
}
function is_apple() {
    if [[ "$OSTYPE" == "darwin"* ]]
    then
        return 0
    fi
    return 1
}

crools_dir="${0%/*}"
if [ ! -d "$crools_dir" ]
then
    echo "Error: invalid crools dir"
    echo "$crools_dir"
    exit 1
fi

cd "$crools_dir" || exit 1

function update_system() {
    local su_cmd
    if [ "$UID" == "0" ]
    then
        su_cmd=""
    else
        if [ -x "$(command -v sudo)" ]
        then
            su_cmd="sudo"
        else
            err "Install sudo or switch to root user"
            exit 1
        fi
    fi

    if [ -x "$(command -v apt-get)" ]
    then
        eval "$su_cmd apt-get update -y && $su_cmd apt-get upgrade -y"
    elif [ -x "$(command -v pacman)" ]
    then
        eval "$su_cmd pacman -Syu"
    elif [ -x "$(command -v brew)" ]
    then
        eval "brew upgrade"
    else
        err "Uknown packetmanager"
    fi
}

if [ "$1" == "--dev" ]
then
    exec "$SHELL"
elif [ "$1" == "-u" ] || [ "$1" == "--update" ] || [ "$1" == "update" ]
then
    update_system
elif [ "$#" -gt "0" ]
then
    echo "usage: crools [--dev|-u|--update|update]"
    exit 1
fi

git_save_pull

(
    if [ -d ../dotfiles ] && [ -f ../dotfiles/setup.sh ]
    then
        cd ../dotfiles || exit 1
        if git remote -v | grep -Eq '^origin.*ChillerDragon/dotfiles( |.git)'
        then
            git_save_pull dotfiles
            ./setup.sh
        fi
    fi
)

if is_func pullpw
then
    pullpw
fi

if [ ! -x "$(command -v cstd)" ]
then
    echo "[*] installing dependency cstd"
    sudo wget -O /usr/local/bin/cstd https://paste.zillyhuhn.com/0 && \
        sudo chmod +x /usr/local/bin/cstd
fi

shellrc=~/.bashrc
if is_apple
then
    shellrc=~/.bash_profile
fi

if ! grep -q "^export PATH=.*$(pwd)" "$shellrc"
then
    if [ -f ./zzh ] && [ -f ./crools ]
    then
        echo "[*] adding crools to path ..."
        echo "export PATH=\"\$PATH:$(pwd)\"" >> "$shellrc"
    fi
fi

function install_shellfunc() {
    local name="$1"
    local code="$2"
    if ! is_func "$name" && ! grep -q "$name" "$shellrc"
    then
        echo "[*] installing shell function '$name' ..."
        echo -e "\\n$code\\n" >> "$shellrc"
fi
}

# shellcheck disable=SC2016
install_shellfunc whereami \
'whereami() {
    echo -e "STY: \\\\033[0;31m$STY\\\\033[0m"
    ps wwf -s $$
}'

# shellcheck disable=SC2016
install_shellfunc all_dirs \
'function all_dirs() {
    if [ "$#" == "0" ] || [ "$1" == "--help" ] || [ "$1" == "-h" ] || [ "$1" == "help" ]
    then
        echo "usage: all_dirs [SHELLCOMMANDS...]"
        echo "navigates to every folder in current directory"
        echo "and evals all given arguments there"
        return
    fi
    cwd="$(pwd)";
    for d in ./*/;
    do
        echo -e "\\\\n$(tput bold)$d$(tput sgr0)\\\\n";
        cd "$d" || { echo "Error: $d failed"; return; }
        eval "$*";
        cd "$cwd" || { echo "Error: navigating back to $cwd failed"; return; }
    done;
}'

