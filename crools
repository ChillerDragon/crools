#!/bin/bash

function err() {
    echo "[-] $1"
}
function log() {
    echo "[*] $1"
}
function suc() {
    echo "[+] $1"
}
function wrn() {
    echo "[!] $1"
}

function git_save_pull() {
    local repo
    repo=${1:-crools}
    if [ "$(git status | tail -n1)" != "nothing to commit, working tree clean" ]
    then
        echo "WARNING: git pull failed! Is your $repo working tree clean?"
        return
    fi
	echo "[*] updating $repo ..."
    git pull
}
function is_func() {
    declare -f -F "$1" > /dev/null
    return $?
}
function is_apple() {
    if [[ "$OSTYPE" == "darwin"* ]]
    then
        return 0
    fi
    return 1
}

crools_dir="${0%/*}"
if [ ! -d "$crools_dir" ]
then
    echo "Error: invalid crools dir"
    echo "$crools_dir"
    exit 1
fi

cd "$crools_dir" || exit 1

function update_system() {
    local su_cmd
    if [ "$UID" == "0" ]
    then
        su_cmd=""
    else
        if [ -x "$(command -v sudo)" ]
        then
            su_cmd="sudo"
        else
            err "Install sudo or switch to root user"
            exit 1
        fi
    fi

    if [ -x "$(command -v apt-get)" ]
    then
        eval "$su_cmd apt-get update -y && $su_cmd apt-get upgrade -y"
    elif [ -x "$(command -v pacman)" ]
    then
        eval "$su_cmd pacman -Syu"
    elif [ -x "$(command -v brew)" ]
    then
        eval "brew upgrade"
    else
        err "Uknown packetmanager"
    fi
}

if [ "$1" == "--dev" ]
then
    exec "$SHELL"
elif [ "$1" == "-u" ] || [ "$1" == "--update" ] || [ "$1" == "update" ]
then
    update_system
elif [ "$#" -gt "0" ]
then
    echo "usage: crools [--dev|-u|--update|update]"
    exit 1
fi

git_save_pull

if [ -x "$(command -v bundle)" ]
then
	bundle install
fi

(
    if [ -d ../dotfiles ] && [ -f ../dotfiles/setup.sh ]
    then
        cd ../dotfiles || exit 1
        if git remote -v | grep -Eq '^origin.*ChillerDragon/dotfiles( |.git)'
        then
            git_save_pull dotfiles
            ./setup.sh
        fi
    fi
    if [ -d ../dotfiles-private ] && [ -f ../dotfiles-private/setup.sh ]
    then
        cd ../dotfiles-private || exit 1
        if git remote -v | grep -Eq '^origin.*ChillerDragon/dotfiles-private( |.git)'
        then
            git_save_pull dotfiles-private
            ./setup.sh
        fi
    fi
)

if is_func pullpw
then
    pullpw
fi

if [ ! -x "$(command -v cstd)" ]
then
    echo "[*] installing dependency cstd"
    sudo wget -O /usr/local/bin/cstd https://paste.zillyhuhn.com/0 && \
        sudo chmod +x /usr/local/bin/cstd
fi

shellrc=~/.bashrc
if is_apple
then
    shellrc=~/.bash_profile
fi


if ! grep -q "^export PATH=.*$(pwd)" "$shellrc"
then
    if [ -f ./zzh ] && [ -f ./crools ]
    then
        echo "[*] adding crools to path ..."
        echo "export PATH=\"\$PATH:$(pwd)\"" >> "$shellrc"
    fi
fi

if [ -d ~/.lib-crash/lib-teeworlds/.git ]
then
	echo "[*] updating lib-teeworlds ..."
	(
		cd ~/.lib-crash/lib-teeworlds || exit 1
		git_save_pull
	)
else
	mkdir -p ~/.lib-crash
	git clone git@github.com:lib-crash/lib-teeworlds.git ~/.lib-crash/lib-teeworlds
fi

function add_to_rc() {
    local name="$1"
    local code="$2"
    if ! grep -q "^$name" "$shellrc"
    then
        echo "[*] adding to bashrc '$name' ..."
        echo -e "\\n$code\\n" >> "$shellrc"
    fi
}

if [ ! -d ~/.config/crools/bashrc.d ]
then
	echo "[*] setting up bashrc.d ..."
	mkdir -p ~/.config/crools
	git clone git@github.com:ChillerDragon/bashrc.d.git ~/.config/crools/bashrc.d
else
	(
		cd ~/.config/crools/bashrc.d || exit 1
		git_save_pull
		for bashrc in ~/.config/crools/bashrc.d/other/*/
		do
			[[ -d "$bashrc" ]] || break
			(
				cd "$bashrc" || exit 1
				git_save_pull
			)
		done
	)
fi
(
        cd ~/.config/crools/bashrc.d || exit 1
        mkdir -p other
        cd other || exit 1
        [ -d bashrc-secrets ] && exit 0

	echo "[*] downloading bashrc-secrets ..."
        git clone git@github.com:ChillerDragon/bashrc-secrets.git
)

# shellcheck disable=SC2016
add_to_rc 'for crools_rc in ~/.config/crools/bashrc.d' \
'# generated by https://github.com/ChillerDragon/crools
for crools_rc in ~/.config/crools/bashrc.d/*.sh
do
	[ -e "$crools_rc" ] || continue
	source "$crools_rc"
done
for crools_rcd in ~/.config/crools/bashrc.d/*/
do
	[ -e "$crools_rcd" ] || continue
	[ -d "$crools_rcd" ] || continue
	for crools_rc in ~/.config/crools/bashrc.d/"$crools_rcd"/*.sh
	do
		[ -e "$crools_rc" ] || continue
		source "$crools_rc"
	done
	for crools_rcdd in "$crools_rcd"*/
	do
		[ -e "$crools_rcdd" ] || continue
		[ -d "$crools_rcdd" ] || continue
		for crools_rc in "$crools_rcdd"/*.sh
		do
			[ -e "$crools_rc" ] || continue
			source "$crools_rc"
		done
	done
done'

