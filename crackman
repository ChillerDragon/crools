#!/usr/bin/env bash
# crackman - your favorite unorganized crack manager
# its like a package manager but its crack

MIRROR=https://zillyhuhn.com/crack
CM_PKG_PATH="$(dirname "$(realpath "$0")")"/packages
CM_BIN_PATH="$HOME/.config/crools/crackman/bin"
CM_PYTHON_PACKAGES_PATH="$HOME/.config/crools/crackman/python-packages"
CM_INSTALLED_PATH="$HOME/.config/crools/crackman/installed"
CM_TMP_PATH="$HOME/.config/crools/crackman/tmp"

clang_release_base_url='https://github.com/muttleyxd/clang-tools-static-binaries/releases/download/master-8f72ab3c'

declare -A Packages=(
	[clang-format-10]="$clang_release_base_url/clang-format-10_linux-amd64"
	[clang-format-11]="$clang_release_base_url/clang-format-11_linux-amd64"
	[clang-format-12]="$clang_release_base_url/clang-format-12_linux-amd64"
	[clang-format-13]="$clang_release_base_url/clang-format-13_linux-amd64"
	[clang-format-14]="$clang_release_base_url/clang-format-14_linux-amd64"
	[clang-tidy-14]="$clang_release_base_url/clang-tidy-14_linux-amd64"
	[clang-tidy-17]="$clang_release_base_url/clang-tidy-17_linux-amd64"
	[gomuks]='https://github.com/tulir/gomuks/releases/download/v0.3.0/gomuks-linux-amd64'
	[term-ux]='https://github.com/chillerbot/chillerbot-ux/releases/download/v0.0.3/term-ux-linux'
)

function show_help() {
	echo "usage: $(tput bold)crackman [COMMAND] [ARGS...]$(tput sgr0)"
	echo "description:"
	echo "  crackman the package manager on crack"
	echo "  ... but not in a good way"
	echo ""
	echo "  It has 3 different sources for packages which is a mess"
	echo "   - There is a list of download links defined in a hashmap in this script"
	echo "   - There is a package mirror expected to be running at $MIRROR"
	echo "   - there are some package files expected at $CM_PKG_PATH"
	echo "commands:"
	echo "  install <package>        install a package"
	echo "  remove  <package>        remove a package"
	echo "  upgrade <package>        upgrade a package"
	echo "  update                   update all packages"
	echo "  purge                    deletes all packages"
	echo "  list                     list installable packages"
	echo "  installed                lists installed packages"
	echo "more help:"
	echo "  you can also do $(tput bold)crackman <command> --help$(tput sgr0)"
	exit 0
}

function is_apple() {
	if [[ "$OSTYPE" == "darwin"* ]]
	then
		return 0
	fi
	return 1
}

function err() {
	echo "[-] $1"
}

function wrn() {
	echo "[!] $1"
}

function log() {
	echo "[*] $1"
}

function install_bash_completion() {
	local crools_path
	local comp_file=./completions/crackman.bash.completion
	crools_path="$(dirname "$0")"
	crools_path="$(cd "$crools_path" && pwd)"
	if [[ -z "$crools_path" ]]
	then
		err "Failed to get path"
		exit 1
	fi
	pushd "$crools_path" > /dev/null || exit 1
	local completions_dir=/usr/share/bash-completion/completions
	if is_apple
	then
		if [ ! -x "$(command -v brew)" ]
		then
			# skip bash completion on macOS
			# if there is no brew
			return
		fi
		if ! completions_dir="$(brew --prefix)/etc/bash_completion.d/"
		then
			err "failed to run brew --prefix for bash completion"
			return
		fi
	fi

	if [ ! -d "$completions_dir" ]
	then
		err "error: Missing bash completion directory"
		err "       expected one at $completions_dir"
		return
	fi

	if [ ! -f "$completions_dir/crackman" ]
	then
		if [ -f "$comp_file" ]
		then
			log "installing bash completion ..."
			if [ "$UID" == "0" ]
			then
				cp \
					"$comp_file" \
					"$completions_dir/crackman"
			elif [ -x "$(command -v sudo)" ]
			then
				sudo cp \
					"$comp_file" \
					"$completions_dir/crackman"
			else
				wrn "missing permission to install completion"
			fi
		else
			wrn "bash completion not found"
		fi
	fi
	popd > /dev/null || exit 1
}
install_bash_completion

function cm_doctor() {
	local shellrc
	if [ ! -d "$CM_BIN_PATH" ]
	then
		mkdir -p "$CM_BIN_PATH" || exit 1
	fi
	if [ ! -d "$CM_PYTHON_PACKAGES_PATH" ]
	then
		mkdir -p "$CM_PYTHON_PACKAGES_PATH" || exit 1
	fi
	if [ ! -d "$CM_INSTALLED_PATH" ]
	then
		mkdir -p "$CM_INSTALLED_PATH" || exit 1
	fi
	if [ ! -d "$CM_TMP_PATH" ]
	then
		mkdir -p "$CM_TMP_PATH" || exit 1
	fi
	if ! echo "$PATH" | grep -q "$CM_BIN_PATH" 
	then
		shellrc=~/.bashrc
		if is_apple
		then
			shellrc=~/.bash_profile
		fi
		if grep -q "$CM_BIN_PATH" "$shellrc"
		then
			err "PATH error restart your shell"
			exit 1
		else
			echo "export PATH=\"\$PATH:$CM_BIN_PATH\"" >> "$shellrc"
		fi
	fi
	if ! echo "$PYTHONPATH" | grep -q "$CM_PYTHON_PACKAGES_PATH" 
	then
		shellrc=~/.bashrc
		if is_apple
		then
			shellrc=~/.bash_profile
		fi
		if grep -q "$CM_PYTHON_PACKAGES_PATH" "$shellrc"
		then
			err "PYTHONPATH error restart your shell"
			exit 1
		else
			echo "export PYTHONPATH=\"\$PYTHONPATH:$CM_PYTHON_PACKAGES_PATH\"" >> "$shellrc"
		fi
	fi
	if [ ! -x "$(command -v wget)" ]
	then
		err "missing depedency wget"
		exit 1
	fi
}

function cm_check_pack() {
	local pack=$1
	if [[ ! "$pack" =~ ^[0-9a-zA-Z_-]*$ ]]
	then
		err "invalid package name '$pack'"
		exit 1
	fi
	if [ -f "$CM_PKG_PATH/$pack" ]
	then
		return 2
	fi
	wget -O "$CM_TMP_PATH/LISTING" "$MIRROR/LISTING"
	if ! grep -q "^$pack " "$CM_TMP_PATH/LISTING"
	then
		if [ "${Packages[$pack]}" != "" ]
		then
			return 1
		fi
		err "no such package '$pack'"
		exit 1
	fi
	return 0
}

function cm_is_installed() {
	local pack="$1"
	if [ -f "$CM_PKG_PATH/$pack" ]
	then
		if "$CM_PKG_PATH/$pack" is_installed? > /dev/null
		then
			return 1
		else
			return 0
		fi
	elif [ -f "$CM_BIN_PATH/$pack" ]
	then
		return 0
	fi
	return 1
}

function cm_install() {
	local pack=$1
	cm_doctor
	if [ "$1" == "" ]
	then
		err "install requires a package name"
		exit 1
	fi
	cm_check_pack "$pack"
	valid_pack="$?"
	if [ "$valid_pack" == "0" ]
	then
		if wget -O "$CM_BIN_PATH/$pack" "$MIRROR/$pack"
		then
			chmod +x "$CM_BIN_PATH/$pack" || exit 1
			touch "$CM_INSTALLED_PATH/$pack"
			log "installed '$pack'"
		else
			err "failed to install '$pack'"
		fi
	elif [ "$valid_pack" == "2" ]
	then
		if ! "$CM_PKG_PATH/$pack"
		then
			exit 1
		fi
		touch "$CM_INSTALLED_PATH/$pack"
		exit 0
	else
		if wget -O "$CM_BIN_PATH/$pack" "${Packages[$pack]}"
		then
			chmod +x "$CM_BIN_PATH/$pack" || exit 1
			touch "$CM_INSTALLED_PATH/$pack"
			log "installed '$pack'"
		else
			err "failed to install '$pack'"
		fi
	fi
}

function cm_remove() {
	local pack=$1
	cm_doctor
	cm_check_pack "$pack"
	if [ "$1" == "" ]
	then
		err "remove requires a package name"
		exit 1
	fi
	if [ -f "$CM_INSTALLED_PATH/$pack" ]
	then
		rm "$CM_INSTALLED_PATH/$pack"
	elif ! cm_is_installed "$pack"
	then
		err "package is not installed"
		exit 1
	fi
	if [ -f "$CM_PKG_PATH/$pack" ]
	then
		"$CM_PKG_PATH/$pack" delete
	else
		rm "$CM_BIN_PATH/$pack" || exit 1
	fi
	log "removed '$pack'"
}

function list_remote() {
	local list_type="$1"
	local name
	local desc
	local listfile
	listfile="$CM_TMP_PATH/LISTING"
	cm_doctor
	wget --quiet -O "$listfile" "$MIRROR/LISTING"
	if [ ! -f "$listfile" ]
	then
		err "list file not found '$listfile'"
		exit 1
	fi
	while read -r line
	do
		name="${line%% *}"
		if [ "$list_type" == "short" ]
		then
			echo "$name"
			continue
		fi
		desc="${line#*$name }"
		if cm_is_installed "$name"
		then
			echo "$(tput bold)$name [installed]$(tput sgr0)"
		else
			echo "$(tput bold)$name$(tput sgr0)"
		fi
		echo "  $desc"
	done < "$listfile"
}

function list_local() {
	local list_type="$1"
	local pack
	local desc
	for pack in "$CM_PKG_PATH"/*
	do
		[[ "$list_type" != "short" ]] && tput bold
		if [[ "$list_type" != "short" ]] && cm_is_installed "$(basename "$pack")"
		then
			printf '%s [installed]\n' "$(basename "$pack")"
		else
			basename "$pack"
		fi
		[[ "$list_type" != "short" ]] && tput sgr0
		if [ "$list_type" != "short" ]
		then
			printf '  %s\n' "$("$pack" description)"
		fi
	done
}

function update_all() {
	local pack
	# local ones
	for pack in "$CM_PKG_PATH"/*
	do
		if cm_is_installed "$(basename "$pack")"
		then
			cm_install "$(basename "$pack")"
		fi
	done
	# remote ones
	# TODO: check version checksum or anything else before redownloading
}

function show_installed() {
	cm_doctor
	local pack
	for pack in "$CM_INSTALLED_PATH"/*
	do
		[[ -f "$pack" ]] || continue

		basename "$pack"
	done
}

if [ "$1" == "help" ] || [ "$1" == "--help" ] || [ "$1" == "-h" ]
then
	show_help
elif [ "$1" == "install" ]
then
	if [ "$2" == "--help" ] || [ "$2" == "" ]
	then
		echo "usage: crackman install <package>"
		exit 0
	fi
	if cm_is_installed "$2"
	then
		log "'$2' is installed already"
		exit 0
	fi
	cm_install "$2"
elif [ "$1" == "upgrade" ]
then
	if [ "$2" == "--help" ] || [ "$2" == "" ]
	then
		echo "usage: crackman upgrade <package>"
		exit 0
	fi
	cm_install "$2"
elif [ "$1" == "update" ]
then
	if [ "$2" == "--help" ]
	then
		echo "usage: crackman update"
		echo "description:"
		echo " it will update all packages"
		exit 0
	fi
	if [ "$#" != 1 ]
	then
		echo "usage: crackman update"
		echo "description:"
		echo " it will update all packages"
		echo " to upgrade individual packages use:"
		echo ""
		echo "   $(tput bold)crackman upgrade <package>$(tput sgr0)"
		echo ""
		exit 1
	fi
	update_all
elif [ "$1" == "remove" ]
then
	if [ "$2" == "--help" ] || [ "$2" == "" ]
	then
		echo "usage: crackman remove <package>"
		exit 0
	fi
	cm_remove "$2"
elif [ "$1" == "list" ]
then
	list_type=full
	if [ "$2" == "--help" ]
	then
		echo "usage: crackman list"
		exit 0
	elif [ "$2" == "--short" ]
	then
		list_type=short
	elif [ "$2" != "" ]
	then
		echo "Error: invalid argument '$2'"
		exit 1
	fi
	list_remote "$list_type"
	list_local "$list_type"
elif [ "$1" == "installed" ]
then
	if [ "$2" == "--help" ]
	then
		echo "usage: crackman installed"
		exit 0
	fi
	show_installed
elif [ "$1" == "purge" ]
then
	if [ "$2" == "--help" ]
	then
		echo "usage: crackman purge"
		exit 0
	fi
	for p in "$CM_BIN_PATH"/*
	do
		if [ "$(basename "$p")" == "*" ]
		then
			err "no packages installed"
			exit 1
		fi
		cm_remove "$(basename "$p")"
	done
else
	show_help
fi

# #!/bin/bash
# # crackman_listing.sh - running on mirror server
# if [ ! -f LISTING ]
# then
#     touch LISTING
# fi
# for pack in ./*
# do
#     p="${pack:2}"
#     if [ "$p" == "$(basename "$0")" ] || [ "$p" == "LISTING" ]
#     then
#         continue
#     fi
#     if ! grep -q "^$p " LISTING
#     then
#         echo "$p (no description)" >> LISTING
#     fi
# done

