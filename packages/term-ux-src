#!/bin/bash

CM_BIN_PATH="$HOME/.config/crools/crackman/bin"
CM_SRC_PATH="$HOME/.config/crools/crackman/src"

mkdir -p "$CM_BIN_PATH"
mkdir -p "$CM_SRC_PATH"

function get_cores() {
	if [ -x "$(command -v nproc)" ]
	then
		nproc
	else
		echo 1
	fi
}

if [ "$1" == "description" ]
then
	echo "Headless version of chillerbot-ux"
elif [ "$1" == "delete" ]
then
	rm -rf "$CM_SRC_PATH"/term-ux
	sudo rm "$CM_BIN_PATH"/term-ux
elif [ "$1" == "is_installed?" ]
then
	if [ -f "$CM_BIN_PATH"/term-ux ]
	then
		echo "yes"
		exit 1
	else
		echo "no"
		exit 0
	fi
else
	if [ -f /etc/arch-release ]
	then
		sudo pacman -S --needed base-devel cargo cmake curl ffmpeg freetype2 git glew glslang gmock libnotify libpng opusfile python rust sdl2 spirv-tools sqlite vulkan-headers vulkan-icd-loader wavpack x264
	elif [ -f /etc/debian_version ]
	then
		sudo apt-get install -y build-essential cargo cmake git glslang-tools google-mock libavcodec-extra libavdevice-dev libavfilter-dev libavformat-dev libavutil-dev libcurl4-openssl-dev libfreetype6-dev libglew-dev libnotify-dev libogg-dev libopus-dev libopusfile-dev libpng-dev libsdl2-dev libsqlite3-dev libssl-dev libvulkan-dev libwavpack-dev libx264-dev python rustc spirv-tools
	fi
	cd "$CM_SRC_PATH" || exit 1
	if [ ! -d "term-ux" ]
	then
		git clone --recursive https://github.com/chillerbot/chillerbot-ux.git term-ux
	fi
	cd term-ux || exit 1
	git pull
	git submodule update
	mkdir -p build
	cd build || exit 1
	cmake .. -DHEADLESS_CLIENT=ON -DCURSES_CLIENT=ON || exit 1
	make -j"$(get_cores)" || exit 1
	cp term-ux "$CM_BIN_PATH"/term-ux
	if [ ! -d /usr/share/ddnet/data ]
	then
		sudo mkdir -p /usr/share/ddnet
		sudo cp -r data /usr/share/ddnet
	fi
fi

