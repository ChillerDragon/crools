#!/bin/bash

CM_BIN_PATH="$HOME/.config/crools/crackman/bin"
CM_SRC_PATH="$HOME/.config/crools/crackman/src"

mkdir -p "$CM_BIN_PATH"
mkdir -p "$CM_SRC_PATH"

function get_cores() {
	if [ -x "$(command -v nproc)" ]
	then
		nproc
	else
		echo 1
	fi
}

if [ "$1" == "description" ]
then
	echo "Headless version of chillerbot-zx"
elif [ "$1" == "delete" ]
then
	rm -rf "$CM_SRC_PATH"/term-zx
	sudo rm "$CM_BIN_PATH"/term-zx
elif [ "$1" == "is_installed?" ]
then
	if [ -f "$CM_BIN_PATH"/term-zx ]
	then
		echo "yes"
		exit 1
	else
		echo "no"
		exit 0
	fi
else
	if [ -f /etc/arch-release ]
	then
		sudo pacman -S --needed base-devel cmake curl freetype2 git glew gmock libnotify opusfile python sdl2 sqlite wavpack x264 ffmpeg vulkan-icd-loader vulkan-headers glslang spirv-tools
	elif [ -f /etc/debian_version ]
	then
		sudo apt install build-essential cmake git google-mock libcurl4-openssl-dev libssl-dev libfreetype6-dev libglew-dev libnotify-dev libogg-dev libopus-dev libopusfile-dev libpnglite-dev libsdl2-dev libsqlite3-dev libwavpack-dev python libx264-dev libavfilter-dev libavdevice-dev libavformat-dev libavcodec-extra libavutil-dev libvulkan-dev glslang-tools spirv-tools
	fi
	cd "$CM_SRC_PATH" || exit 1
	if [ ! -d "term-zx" ]
	then
		git clone --recursive git@github.com:chillerbot/chillerbot-zx.git term-zx
	fi
	cd term-zx || exit 1
	git pull
	git submodule update
	mkdir -p build
	cd build || exit 1
	cmake .. -DHEADLESS_CLIENT=ON -DCURSES_CLIENT=ON || exit 1
	make -j"$(get_cores)" || exit 1
	cp term-zx "$CM_BIN_PATH"/term-zx
	if [ ! -d /usr/share/ddnet/data ]
	then
		sudo mkdir -p /usr/share/ddnet
		sudo cp -r data /usr/share/ddnet
	fi
fi

