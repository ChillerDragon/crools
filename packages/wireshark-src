#!/bin/bash

CM_BIN_PATH="$HOME/.config/crools/crackman/bin"
CM_SRC_PATH="$HOME/.config/crools/crackman/src"

mkdir -p "$CM_BIN_PATH"
mkdir -p "$CM_SRC_PATH"

# https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=wireshark-git
arch_deps=(
        'c-ares'
        'glib2'
        'libcap'
        'libpcap'
        'lua52'
        'libmaxminddb'
        'pcre2'

        # wireshark-qt dependencies
        'qt6-multimedia'
        'qt6-tools'
        'qt6-svg'               # for SVG icons in the Qt GUI
        'qt6-5compat'
        # for post-installation hook
        'desktop-file-utils'

        # optional dependencies for improved dissection or features
        'gnutls'                # for SSL decryption using RSA keys
        'krb5'
        #'libsmi'
        'libnghttp2'            # for HTTP/2 dissector
        'minizip'               # for profile zip files in Qt
        'sbc'                   # Bluetooth audio codec in RTP player
        'snappy' 'lz4'          # for cql dissector
        'brotli'                # brotli decompression in HTTP/HTTP2 dissectors
        'zstd'                  # for Zstd support in Kafka dissector
        'spandsp'               # for G.722/G.726 codec support in RTP player
        #'bcg729'               # for G.729 codec support in RTP player
        'opus'                  # for Opus codec support in RTP player
        #'libilbc'              # for iLBC codec support in RTP player

        # extcap (sshdump, etc.)
        'libssh'

	# make deps
	'cmake'
	'git'
	'ninja'
	'python'
)

if [ "$1" == "description" ]
then
	echo 'Wireshark is a network traffic analyzer, or "sniffer"'
elif [ "$1" == "delete" ]
then
	rm -rf "$CM_SRC_PATH"/wireshark
	sudo rm /usr/local/bin/wireshark
	sudo rm /usr/local/bin/tshark
	sudo rm /usr/local/bin/editcap
	sudo rm /usr/local/bin/reordercap
	sudo rm /usr/local/bin/text2pcap
	sudo rm /usr/local/bin/sharkd
	sudo rm /usr/local/bin/capinfos
	sudo rm /usr/local/bin/captype
	sudo rm /usr/local/bin/mergecap
	sudo rm /usr/local/bin/randpkt
elif [ "$1" == "is_installed?" ]
then
	if [ -f /usr/local/bin/wireshark ]
	then
		echo "yes"
		exit 1
	else
		echo "no"
		exit 0
	fi
else
	distro="$(grep "^ID=" /etc/os-release | cut -d'=' -f2)"
	if [ "$distro" != "debian" ] && [ "$distro" != "arch" ]
	then
		echo "Error: wireshark is only supported on debian"
		echo "       you are running '$distro'"
		exit 1
	fi
	if [ ! -x "$(command -v fzf)" ]
	then
		echo "Error: missing dependency fzf"
		exit 1
	fi
	if [ ! -x "$(command -v git)" ]
	then
		echo "Error: missing dependency git"
		exit 1
	fi

	if [ -f /usr/bin/wireshark ]
	then
		echo "Error: wireshark is already installed using apt"
		tput bold
		echo "    sudo apt remove wireshark"
		tput sgr0
		exit 1
	fi

	if [ "$distro" == "debian" ]
	then
		# using wireshark deps script
		test
	elif [ "$distro" == "arch" ]
	then
		sudo pacman -S --needed \
			"${arch_deps[@]}"
	else
		echo "Error: unsupported distro '$distro'"
		exit 1
	fi

	cd "$CM_SRC_PATH" || exit 1
	if [ ! -d "wireshark" ]
	then
		git clone --recursive git@gitlab.com:wireshark/wireshark.git
	fi
	cd wireshark || exit 1
	tag="$(git tag | grep '^v' | sort -V | tail -n 10 | tac | fzf)"
	if [ "$tag" == "" ]
	then
		echo "Error: invalid tag"
		exit 1
	fi
	git pull
	git checkout "$tag" || exit 1
	git pull


	if [ "$distro" == "debian" ]
	then
		# https://www.wireshark.org/docs/wsdg_html_chunked/ChapterSetup.html#ChSetupUNIXBuildEnvironmentSetup
		sudo ./tools/debian-setup.sh --install-deb-deps || exit 1
	fi


	mkdir build
	cd build || exit 1
	cmake -GNinja \
		-DCMAKE_BUILD_TYPE=Release \
		-DCMAKE_INSTALL_PREFIX=/usr/local \
		-DCMAKE_INSTALL_LIBDIR=lib \
		-DENABLE_ILBC=OFF \
		.. || exit 1
	if ! ninja
	then
		echo "[*][crackman] build failed try running this:"
		echo ""
		echo "  cd $PWD"
		echo "  ninja"
		echo ""
		exit 1
	fi
	sudo ninja install || exit 1
	# make -j"$(nproc)" || exit 1
	# sudo make install || exit 1
fi

