#!/bin/bash

current_dir="$(basename "$(pwd)")"
if [ "$current_dir" = ddnet_protocol ]
then
	if ! _ddnet_protocol_lint
	then
		exit 1
	fi
	exit 0
fi

RESET="\e[0m"
GREEN="\e[1;32m"
RED="\033[1;91m"
BG_RED="\033[0;101m"

errors=0

err() {
	local msg="$1"
	printf '%b%s%b%b%s%b\n' "$BG_RED" "[ERROR]" "$RESET" "$RED" "$msg" "$RESET"
	errors="$((errors+1))"
}

fatal() {
	local msg="$1"
	printf '❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌\n'
	printf '%b%s%b%b%s%b\n' "$BG_RED" "[FATAL FAILURE]" "$RESET" "$RED" " Error: $msg" "$RESET"
	printf '❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌\n'
	exit 1
}

success() {
	local msg="$1"
	printf "\n%b%s%b\n" "$GREEN" "$msg" "$RESET"
}

ok() {
	local msg="$1"
	printf "%s .. %bOK%b\n" "$msg" "$GREEN" "$RESET"
}

echo "ddnet code base linter"
echo "runs similiar stuff like the CI"

./scripts/fix_style.py --dry-run || fatal style
ok "clang format"
./scripts/check_header_guards.py || fatal guards
ok "header guards"
./scripts/check_config_variables.py || fatal cfg_vars
ok "config variables"
find . -not \( -path "./build*" -type d -prune \) -type f -name '*.sh' -print0 | xargs -0 shellcheck || fatal shellcheck
ok "shellckeck"
find . -not \( -path "./build*" -type d -prune \) -name "*.sh" -print0 | xargs -0 shfmt -d || fatal shfmt
ok "shfmt"
find . -type f -name "*.py" -path './scripts/*' -or -path './datasrc/*' -not -path '*__pycache__*' -print0 | xargs -0 pylint || fatal pylint
ok "pytest"

if grep --exclude-dir rust-bridge -rE '^#include "(antibot|base|engine|game|steam|test)/' src/
then
	err "see wrong includes above ^"
fi
ok "absolute includes"

ctidy || fatal ctidy
ok "clang tidy"
ddnet_tests || fatal tests
ok "ddnet tests"

if grep -Eqr '(msg|Print).*\(.*"[Ee]rror:' src/;
then
	echo "Expected log errors to be in this format 'ERROR: error message'"
	echo "Found these non uppercased log errors:"
	grep -Er '(msg|Print).*\(.*"[Ee]rror:' src/
	fatal "log format"
fi
ok "log style"

find src -name '*.h' | while read -r i; do grep -r -q "$(basename "$i")" || error "Header file $i is unused"; done
ok "unused headers"

if [ "$errors" -eq "0" ]
then
	success "✅ all tests passed."
else
	fatal "There are $errors failures"
fi

