#!/bin/bash

# a creppy C lang repl
# REPL as in READ EVALUATE PRINT LOOP
# trying to to mimic pythons interactive shell or rubys irb
# for the C programming language

# -----------------------------------------------
# user options
# confirgurable via environment variables

# if the user input does not end with semicolon
# append one so it compiles correctly
#
# this will conflict with a possible future multi line support
# where the input keeps consuming even on newlines until a semicolon is hit
ARG_AUTO_SEMICOLON="${ARG_AUTO_SEMICOLON:-1}"

# insert closing parenthesis automatically if one is opend
# also convering square brackets and curly braces
ARG_SMART_PARENTHESIS="${ARG_SMART_PARENTHESIS:-1}"

ARG_COMPILER="${CC:-g++}"

# -----------------------------------------------

COL_RESET=''
COL_BLACK=''
# COL_RED=''
# COL_GREEN=''
COL_YELLOW=''
COL_BLUE=''
# COL_MAGENTA=''
# COL_CYAN=''
# COL_WHITE=''
BOLD=''
CLEAR_BOLD=''

init_colors() {
	# https://no-color.org/
	[ "$NO_COLOR" = "" ] || return

	if [ ! -x "$(command -v tput)" ]
	then
		printf 'Warning: there is no color support yet for systems without tput'
		return
	fi
	if [ "$(tput colors)" -ge 8 ]
	then
		COL_RESET="\e[0m"
		COL_BLACK="\e[0;30m";
		# COL_RED="\e[0;31m";
		# COL_GREEN="\e[0;32m";
		COL_YELLOW="\e[0;33m";
		COL_BLUE="\e[0;34m";
		# COL_MAGENTA="\e[0;35m";
		# COL_CYAN="\e[0;36m";
		# COL_WHITE="\e[0;37m";

		# bold
		# COL_BBLACK="\e[1;30m";
		# COL_BRED="\e[1;31m";
		# COL_BGREEN="\e[1;32m";
		# COL_BYELLOW="\e[1;33m";
		# COL_BBLUE="\e[1;34m";
		# COL_BMAGENTA="\e[1;35m";
		# COL_BCYAN="\e[1;36m";
		# COL_BWHITE="\e[1;37m";

		BOLD="\033[1m"
		CLEAR_BOLD="\033[0m"
	else
		printf 'Warning: your system does not seem to support colors'
	fi
}

init_colors

dbg() {
	[[ "$DEBUG" != "" ]] || return

	printf '[DEBUG] %b\n' "$1"
}
log() {
	printf '[*] %b\n' "$1"
}
err() {
	printf '[-] %b\n' "$1"
}
fail() {
	err "$1"
	exit 1
}

if [ "${BASH_VERSINFO[0]}" -lt 5 ] && [ "${BASH_VERSINFO[1]}" -lt 3 ]
then
	err "Error: you need at least bash 4.2 the blaze it edition"
	err "       because this script uses negative indecies in arrays"
	exit 1
fi
if [ "${BASH_VERSINFO[0]}" -lt 5 ] && [ "${BASH_VERSINFO[1]}" -lt 5 ]
then
	err "Error: you need at least bash 4.4"
	err "       because this script uses mapfile -t array < <(mycommand)"
	err "       https://www.shellcheck.net/wiki/SC2207"
	exit 1
fi

mkdir -p /tmp/crools-"$USER"/crepl/

tmp_src_file="$(mktemp /tmp/crools-"$USER"/crepl/entry_XXXXXXXXXXXXX.c)" # entry file for compliation
tmp_src_file_show="$(mktemp /tmp/crools-"$USER"/crepl/entry_show_XXXXXXXXXXXXX.c)" # entry file for showing the code
tmp_src_file_test_includes="$(mktemp /tmp/crools-"$USER"/crepl/test_includes_XXXXXXXXXXXXX.c)" # do not add includes that do not compile
tmp_src_file_includes="$(mktemp /tmp/crools-"$USER"/crepl/includes_XXXXXXXXXXXXX.c)" # #includes added by user on top
tmp_src_file_main="$(mktemp /tmp/crools-"$USER"/crepl/main_XXXXXXXXXXXXX.c)" # main func body
tmp_src_file_test_main="$(mktemp /tmp/crools-"$USER"/crepl/test_main_XXXXXXXXXXXXX.c)" # test if it compiles before persisting
tmp_src_file_functions="$(mktemp /tmp/crools-"$USER"/crepl/functions_XXXXXXXXXXXXX.c)" # define function above main
tmp_src_file_test_functions="$(mktemp /tmp/crools-"$USER"/crepl/test_functions_XXXXXXXXXXXXX.c)" # test if func compiles before persisiting
tmp_src_file_tmp="$(mktemp /tmp/crools-"$USER"/crepl/tmp_XXXXXXXXXXXXX.c)" # run only once never persist (if eval is a print for example)
tmp_src_file_out="$(mktemp /tmp/crools-"$USER"/crepl/bin_XXXXXXXXXXXXX.c)" # output binary

chmod +x "$tmp_src_file_out"


gen_entry() {
	# resolve=0 cpp includes
	# resolve=1 put in file contents
	local resolve="$1"
	_include_or_print() {
		local resolve="$1"
		local filename="$2"
		if [ "$resolve" = "1" ]
		then
			printf '%s' "$(cat "$filename")"
		else
			printf '#include "%s"' "$filename"
		fi
	}
cat << EOF
#include <stdio.h>
#include <stdlib.h>

$(_include_or_print "$resolve" "$tmp_src_file_includes")
#include "$tmp_src_file_test_includes"

$(_include_or_print "$resolve" "$tmp_src_file_functions")
#include "$tmp_src_file_test_functions"

// debug print macros
// int *a;
// pp(a); // => 0x7f141612bad0
#define pi(val) printf("%i\n", val);
#define pf(val) printf("%f\n", val);
#define px(val) printf("%x\n", val);
#define pc(val) printf("%c\n", val);
#define ps(val) printf("%s\n", val);
#define pp(val) printf("%p\n", val);
#define pzu(val) printf("%zu\n", val);

int main()
{
	$(_include_or_print "$resolve" "$tmp_src_file_main")
	$(_include_or_print "$resolve" "$tmp_src_file_test_main")
	$(_include_or_print "$resolve" "$tmp_src_file_tmp")
}
EOF
}

:>"$tmp_src_file"
gen_entry 0 > "$tmp_src_file"

cleanup() {
	echo "exit(0)"
	rm "$tmp_src_file"
	rm "$tmp_src_file_test_includes"
	rm "$tmp_src_file_includes"
	rm "$tmp_src_file_main"
	rm "$tmp_src_file_test_main"
	rm "$tmp_src_file_test_functions"
	rm "$tmp_src_file_functions"
	rm "$tmp_src_file_tmp"
	rm "$tmp_src_file_out"
}

trap cleanup EXIT

compiler() {
	"$ARG_COMPILER" "$@"
}

crepl_build() {
	if compiler "$tmp_src_file" -o "$tmp_src_file_out" -I"$PWD"
	then
		cat "$tmp_src_file_test_main" >> "$tmp_src_file_main"
		cat "$tmp_src_file_test_functions" >> "$tmp_src_file_functions"
		cat "$tmp_src_file_test_includes" >> "$tmp_src_file_includes"
	fi
}

bat_or_cat() {
	local filename="$1"
	local tool=cat
	if bat -h | grep -q "cat.*clone with wings"
	then
		tool=bat
	fi
	if batcat -h | grep -q "cat.*clone with wings"
	then
		tool=batcat
	fi
	"$tool" "$filename"
}

crepl_show_code() {
	# this works but does not resolve the includes
	# bat_or_cat "$tmp_src_file"

	# no way this is secure, portable or correct
	# code_with_cat_includes="$(sed -E 's/#include "\/tmp\/crools([^"]+)/$\(cat "\/tmp\/crools\1\)/g' "$tmp_src_file")"

	printf '// file used for compilation is located at\n// %s\n' "$tmp_src_file" > "$tmp_src_file_show"
	gen_entry 1 >> "$tmp_src_file_show"
	bat_or_cat "$tmp_src_file_show"
}

crepl_run() {
	"$tmp_src_file_out"
}

c_var_pattern='[a-zA-Z_][a-zA-Z_0-9]*'
c_func_name_pattern="$c_var_pattern"
c_stmt_pattern='[^;]+' # TODO: do this better ; can be part of a for loop and of a string for example
c_numeric_sign_pattern='[-+~]+'
c_int_value_pattern="(\ *(${c_numeric_sign_pattern}?\()*\ *)*${c_numeric_sign_pattern}?([0-9]|0x[0-9a-fA-F]+)+[ )]*"
# c_float_value_pattern="$c_int_value_pattern\.?[0-9]+f?"
c_math_operators_pattern='\ *[\/\+-\*^|&%]\ *'
c_math_expr_pattern="($c_int_value_pattern${c_math_operators_pattern})+($c_int_value_pattern)"
c_int_value_or_math_pattern="(($c_math_expr_pattern)|$c_int_value_pattern)"
# matches only the right side of a math expression
c_math_expr_right="(${c_math_operators_pattern}$c_int_value_pattern)+"
# matches only the left side of a math expression
c_math_expr_left="($c_int_value_pattern${c_math_operators_pattern})+"

[[ -      =~ $c_numeric_sign_pattern ]] || fail "-"
[[ 2      =~ $c_int_value_pattern ]] || fail "2"
[[ 2+     =~ $c_math_expr_left ]] || fail "2+"
[[ 2+2+2+ =~ $c_math_expr_left ]] || fail "2+"

[[ "2+rand()" =~ ^(${c_math_expr_left}|)(${c_func_name_pattern})\(\)$ ]] || fail "2+rand()"
[[ "2+2+rand()" =~ ^(${c_math_expr_left}|)(${c_func_name_pattern})\(\)$ ]] || fail "2+2+rand()"

# TODO: func pattern doesnt match
c_type_pattern='(void|int|char|long|long long|float|double|short|int64_t|time_t)'
c_single_line_func_pattern='(const\ *)?'"$c_type_pattern"'\ *\*?\ *'"$c_var_pattern"'\ *\(.*\)\ *{.*}'

# produces a format string for c printf
# including a %d or %u placeholder
# that has to be filled
fmt_int_value() {
	local signed="${1:signed}"
	local _value="$2"
	if [ "$signed" = "signed" ]
	then
		printf '%b(%bint%b)%b%%d%b' "$COL_BLACK" "$COL_BLUE" "$COL_BLACK" "$COL_YELLOW" "$COL_RESET"
	else
		printf '%b(%bunsigned int%b)%b%%d%b' "$COL_BLACK" "$COL_BLUE" "$COL_BLACK" "$COL_YELLOW" "$COL_RESET"
	fi
}

# produces a format string for c printf
# including a %lu placeholder
# that has to be filled
fmt_size_t_value() {
	printf '%b(%bsize_t%b)%b%%lu%b' "$COL_BLACK" "$COL_BLUE" "$COL_BLACK" "$COL_YELLOW" "$COL_RESET"
}

# produces a format string for c printf
# including a %zd placeholder
# that has to be filled
fmt_ssize_t_value() {
	printf '%b(%bssize_t%b)%b%%zd%b' "$COL_BLACK" "$COL_BLUE" "$COL_BLACK" "$COL_YELLOW" "$COL_RESET"
}

# takes in the full prompt
# and prints only the word at the current cursor
# that should be used for auto completion
# for example if the cursor is at the end of the line:
# 	in:  unsigned int a 2;pr
# 	out: pr
line_to_autocomplete_word() {
	# TODO: this code is horrible
	local line="$1"
	local tokens
	IFS=')(",; ' read -ra tokens <<< "$line"
	local token
	local distance=0
	for token in "${tokens[@]}"
	do
		local tl="${#token}"
		distance=$((distance+tl+1))
		if [ "$distance" -ge "$READLINE_POINT" ]
		then
			printf '%s' "$token"
			break
		fi
	done
}

insert_at_cursor() {
	local str="$1"
	READLINE_LINE="${READLINE_LINE::$READLINE_POINT}$str${READLINE_LINE:$READLINE_POINT}"
}

key_open_parenthesis() {
	insert_at_cursor '()'
	READLINE_POINT=$((READLINE_POINT+1))
}
key_open_curly() {
	insert_at_cursor '{}'
	READLINE_POINT=$((READLINE_POINT+1))
}
key_open_bracket() {
	insert_at_cursor '[]'
	READLINE_POINT=$((READLINE_POINT+1))
}

tab_complete() {
	# p<tab> works but this is ugly use compgen to generate that stuff
	[[ ${#READLINE_LINE} -eq 0 ]] && READLINE_LINE=$(fc -l -n -1 | xargs)

	local cpp_keywords=(
		alignas alignof and and_eq asm atomic_cancel atomic_commit atomic_noexcept
		auto bitand bitor bool break case catch char char8_t char16_t char32_t
		class compl concept const consteval constexpr constinit const_cast continue
		co_await co_return co_yield decltype default delete double dynamic_cast else
		enum explicit export extern false float for friend goto int inline long mutable
		new noexcept not not_eq nullptr namespace operator or_eq
		reflexpr register reinterpret_cast requires return short signed sizeof static
		static_assert static_cast struct switch template this throw true try typedef
		typeid typename unsigned union virtual void volatile wchar_t while
	)
	local libc_functions=(
		printf puts atoi
	)
	local word_to_complete
	word_to_complete="$(line_to_autocomplete_word "$READLINE_LINE")"
	[ "$word_to_complete" = "" ] && return

	local completions
	# we set IFS= for the read call we currently are in
	# so we have to enable IFS word splitting again for compgen to work
	mapfile -t completions < <(IFS=$' \t\n' compgen -W "$(printf "'%s' " "${cpp_keywords[@]}" "${libc_functions[@]}")" -- "$word_to_complete")
	[ "${#completions[@]}" -eq 0 ] && return

	local wanted_word="${completions[0]}"
	local current_word_len="${#word_to_complete}"
	local append_str
	append_str="${wanted_word:$current_word_len}"
	local append_str_len="${#append_str}"

	insert_at_cursor "$append_str"
	READLINE_POINT=$((READLINE_POINT+append_str_len))
}

mkdir -p ~/.config/crools

history -r ~/.config/crools/crepl_history
set -o emacs

# shellcheck disable=SC2128
if [ "${BASH_VERSINFO}" -ge 4 ]
then
	bind -x '"\t":"tab_complete"'
	if [ "$ARG_SMART_PARENTHESIS" = "1" ]
	then
		bind -x '"(":"key_open_parenthesis"'
		bind -x '"{":"key_open_curly"'
		bind -x '"[":"key_open_bracket"'
	fi
else
	echo "Warning: your bash is too old for autocompletion"
fi

parse_args() {
	while true
	do
		[[ "$#" -gt "0" ]] || break

		arg="$1"
		shift

		if [ "$arg" == "-h" ]
		then
			echo "usage: crepl [OPTION..]"
			echo "options:"
			echo "  --cplay <filename>     quickstart with cplay file"
			exit 0
		elif [ "$arg" == "--cplay" ]
		then
			local filename
			filename="$1"
			shift
			if [ "$filename" == "" ]
			then
				echo "usage: crepl --cplay <filename>"
				exit 1
			fi
			cplay_include="#include \"/tmp/crools-$USER/cplay/$filename\""
			echo "> $cplay_include"
			printf '%s\n' "$cplay_include" > "$tmp_src_file_test_includes"
			crepl_build
			crepl_run

			:>"$tmp_src_file_test_includes"
		fi
	done
}

parse_args "$@"

is_int_func_call() {
	local input="$1"
	local group_offset
	#  shellcheck disable=SC1003
	group_offset="$(printf '%s' "$c_math_expr_left" | grep -o .\( | grep -v '\\' | grep -o '(' | wc -l)"
	if ! [[ "$input" =~ ^\ *(${c_math_expr_left}|)(${c_func_name_pattern})\((${c_stmt_pattern})?\)(${c_math_expr_right})?\;+$ ]]
	then
		return 1
	fi
	local func_name
	local func_arg

	local func_g
	local arg_g
	func_g="$((group_offset + 2))"
	arg_g="$((group_offset + 3))"

	if ! func_name="${BASH_REMATCH[$func_g]}"
	then
		return 1
	fi
	[[ "$func_name" = "" ]] && return 1
	func_arg="${BASH_REMATCH[$arg_g]}"
	if ! man -P cat 3 "$func_name" 2>/dev/null | grep -q "^[[:space:]]*int $func_name("
	then
		return 1
	fi
	dbg "got single method call to '$func_name' which returns int"
	dbg "func arg=$func_arg"
	local int_stmt="${BASH_REMATCH[0]}"
	int_stmt="${int_stmt//;/}"
	dbg "int statement=$int_stmt"
	# print int return value to stdout
	printf '%s\n' "$input" > "$tmp_src_file_test_main"
	printf 'printf("%s\\n", %s);\n' "$(fmt_int_value signed)" "$int_stmt" > "$tmp_src_file_tmp"
	return 0
}

is_int_func_call "2+2+2+rand()-2%2;" || fail "int_func_test"
is_int_func_call "2+2+2+rand()-2%2 * 666712 + 0xff;" || fail "int_func_test"

is_size_t_func_call() {
	local input="$1"
	if ! [[ "$input" =~ ^\ *(${c_func_name_pattern})\((${c_stmt_pattern})\)\;+$ ]]
	then
		return 1
	fi
	local func_name
	local func_arg
	if ! func_name="${BASH_REMATCH[1]}"
	then
		return 1
	fi
	[[ "$func_name" = "" ]] && return 1
	func_arg="${BASH_REMATCH[2]}"
	if [ "$func_name" = sizeof ]
	then
		dbg "got compiler internal sizeof"
		dbg "skipping man page check"
	else
		if ! man -P cat "$func_name" 2>/dev/null | grep -q "^[[:space:]]*size_t $func_name("
		then
			return 1
		fi
	fi
	dbg "got single method call to '$func_name' which returns size_t"
	dbg "func arg=$func_arg"
	# print int return value to stdout
	printf '%s\n' "$input" > "$tmp_src_file_test_main"
	printf 'printf("%s\\n", %s);\n' "$(fmt_size_t_value)" "$func_name($func_arg)" > "$tmp_src_file_tmp"
	return 0
}

is_ssize_t_func_call() {
	local input="$1"
	if ! [[ "$input" =~ ^\ *(${c_func_name_pattern})\((${c_stmt_pattern})\)\;+$ ]]
	then
		return 1
	fi
	local func_name
	local func_arg
	if ! func_name="${BASH_REMATCH[1]}"
	then
		return 1
	fi
	[[ "$func_name" = "" ]] && return 1
	func_arg="${BASH_REMATCH[2]}"
	if ! man -P cat "$func_name" 2>/dev/null | grep -q "^[[:space:]]*ssize_t $func_name("
	then
		return 1
	fi
	dbg "got single method call to '$func_name' which returns ssize_t"
	dbg "func arg=$func_arg"
	# print int return value to stdout
	printf '%s\n' "$input" > "$tmp_src_file_test_main"
	printf 'printf("%s\\n", %s);\n' "$(fmt_ssize_t_value)" "$func_name($func_arg)" > "$tmp_src_file_tmp"
	return 0
}

is_math_statement() {
	local input="$1"
	if ! [[ "$input" =~ ^\ *(${c_int_value_or_math_pattern})\;+$ ]]
	then
		return 1
	fi
	local math_expr
	if ! math_expr="${BASH_REMATCH[1]}"
	then
		return 1
	fi
	[[ "$math_expr" = "" ]] && return 1
	dbg "got math expression '$math_expr'"
	# print math expression value to stdout
	printf '%s\n' "$input" > "$tmp_src_file_test_main"
	printf 'printf("%s\\n", %s);\n' "$(fmt_int_value signed)" "$math_expr" > "$tmp_src_file_tmp"
	return 0
}

log "CC=$ARG_COMPILER"
log "to see the current code use '${BOLD}show code${CLEAR_BOLD}'"
log "available print helpers: pp(pointer), pi(integer), pf(float), ps(string), pc(char)"

while IFS= read -e -r -p "> " input
do
	[ "$input" = "" ] && continue

	if [ "$input" = "show code" ]
	then
		crepl_show_code
		history -s -- "$input"
		continue
	fi

	history -s -- "$input"
	if [ "$ARG_AUTO_SEMICOLON" = "1" ] && [[ ! "$input" = '#'* ]]
	then
		if ! printf '%s' "$input" | grep -q ';$'
		then
			input="$input;"
		fi
	fi
	if [[ "$input" =~ ^[:space:]*(puts|printf|pi|pf|px|pc|ps|pp|pzu)\( ]]
	then
		printf '%s\n' "$input" > "$tmp_src_file_tmp"
	elif [[ "$input" =~ ^\ *int\ +${c_var_pattern}\ *=(${c_stmt_pattern})\;+$ ]]
	then
		# print int assignment result to stdout
		printf '%s\n' "$input" > "$tmp_src_file_test_main"
		printf 'printf("%s\\n", %s);\n' "$(fmt_int_value signed)" "${BASH_REMATCH[1]}" > "$tmp_src_file_tmp"
	elif [[ "$input" =~ ^\ *unsigned(\ int)?\ +${c_var_pattern}\ *=(${c_stmt_pattern})\;+$ ]]
	then
		# print int assignment result to stdout
		printf '%s\n' "$input" > "$tmp_src_file_test_main"
		printf 'printf("%s\\n", %s);\n' "$(fmt_int_value unsigned)" "${BASH_REMATCH[2]}" > "$tmp_src_file_tmp"
	elif is_int_func_call "$input"
	then
		test # handled in is_int_func_call()
	elif is_size_t_func_call "$input"
	then
		test # handled in is_size_t_func_call()
	elif is_ssize_t_func_call "$input"
	then
		test # handled in is_ssize_t_func_call()
	elif is_math_statement "$input"
	then
		test # handled in is_math_statement()
	elif [[ "$input" =~ $c_single_line_func_pattern ]]
	then
		printf '%s\n' "$input" > "$tmp_src_file_test_functions"
	elif [[ "$input" =~ ^#include(\ |\"|<) ]]
	then
		# use space/tab in front of #include in the repl
		# to not add it at the top of the program
		# but inside of main
		printf '%s\n' "$input" > "$tmp_src_file_test_includes"
	else
		printf '%s\n' "$input" > "$tmp_src_file_test_main"
	fi
	crepl_build
	crepl_run

	:>"$tmp_src_file_test_includes"
	:>"$tmp_src_file_test_main"
	:>"$tmp_src_file_tmp"
done

history -w ~/.config/crools/crepl_history
