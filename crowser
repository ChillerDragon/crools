#!/bin/bash
# -*- mode:sh -*-
# CURLFIRE START - code by talwrii
# https://github.com/talwrii/curlfire

tmpfile="$(mktemp /tmp/cookies.sqlite.XXXXXXXXXX)"
curlcookies="$(mktemp /tmp/curlcookies.XXXXXXXXXX)"

die() {
    echo >&2 "$*"
    exit 1
}

cleanup() {
    rm -f "$tmpfile"
}

extract_cookies() {
    if [ "$#" -ge 1 ]; then
        sqlfile="$1"
    else
        if tty -s; then
        sqlfile=$(ls -t ~/.mozilla/firefox/*/cookies.sqlite | head -1)

        sqlfile="-"     # Will use 'cat' below to read stdin
        fi
    fi

    if [ "$sqlfile" != "-" -a ! -r "$sqlfile" ]; then
        echo "Error. File $sqlfile is not readable." >&2
        exit 1
    fi

    # We have to copy cookies.sqlite, because FireFox has a lock on it
    cat "$sqlfile" >> $tmpfile


    # This is the format of the sqlite database:
    # CREATE TABLE moz_cookies (id INTEGER PRIMARY KEY, name TEXT, value TEXT, host TEXT, path TEXT,expiry INTEGER, lastAccessed INTEGER, isSecure INTEGER, isHttpOnly INTEGER);

    echo "# Netscape HTTP Cookie File"
    sqlite3 -separator $'\t' $tmpfile <<- EOF
.mode tabs
.header off
select host,
case substr(host,1,1)='.' when 0 then 'FALSE' else 'TRUE' end,
path,
case isSecure when 0 then 'FALSE' else 'TRUE' end,
expiry,
name,
value
from moz_cookies;
EOF

    cleanup
}

cookiefire() {
    # Run older ld (pseudo condition)

    if [ "$#" == "0" ];  then
        profile=default
    elif [ "$#" == "1"  ]; then
        profile=$1
    else
        die "usage $0 [profile]"
    fi;

    echo $HOME/.mozilla/firefox/*.$profile/cookies.sqlite | {
        read cookie_file
        extract_cookies "$cookie_file"
    }
}

trap cleanup  EXIT INT QUIT TERM

set -o errexit
set -o nounset
set -o pipefail

curlfire() {
    profile=default
    skip=
    args=()
    for var in "$@"; do
        # Ignore known bad arguments
        case "$var" in
            -P)
                skip=yes
                ;;
            *)
              if [ -z "$skip" ]; then
                  args+=("$var")
              else
                  profile=$var
              fi;
              skip=
        esac;
    done

    cookiefire "$profile" > "$curlcookies"
    curl -b "$curlcookies" "${args[@]}" ;
}


# CURLFIRE END - code by talwrii
# https://github.com/talwrii/curlfire

# crowser - not a actual browser
# used to preview github pages

function hr() {
    local cols="$(tput cols)"
    local i
    cols="$((cols-4))"
    printf " +"
    for ((i=0;i<cols;i++))
    do
        printf "-"
    done
    echo "+ "
}

url="${1:-https://github.com/ChillerDragon/crools}"
webcache_root=/tmp/crowser
webcache=$webcache_root/index.html
mkdir -p "$webcache_root" || exit 1
curlfire "$url" > "$webcache"

hr

BOLD='\033[1m'
RESET='\033[0m'

# author="$(grep -A 1 'itemprop="author"' index.html | tail -n1)"
# if [[ "$author" =~ href=\"/(.*)\"\> ]]
# then
#     echo ${BASH_REMATCH[1]}
# else
#     echo "failed to parse author"
#     exit 1
# fi

name="$(grep '<a data-pjax="#js-repo-pjax-container" href' "$webcache")"
if [[ "$name" =~ href=\"/(.*)\"\> ]]
then
    echo -e "$BOLD${BASH_REMATCH[1]}$RESET"
    echo ""
else
    echo "failed to parse name"
    exit 1
fi

issues="$(grep -A 1 'name">Issues</span>' "$webcache" | tail -n1)"
[[ "$issues" =~ Counter\"\>(.*)\</span ]] && issues="${BASH_REMATCH[1]}"
printf "Issues: $issues   "
prs="$(grep -A 1 'name">Pull requests</span>' "$webcache" | tail -n1)"
[[ "$prs" =~ Counter\"\>(.*)\</span ]] && prs="${BASH_REMATCH[1]}"
printf "Pull requests: $prs   "
echo ""

# ---

commits="$(grep -A 2 'octicon-history' "$webcache" | tail -n1)"
# [[ "$commits" =~ text-emphasized\"\>(.*)\</span\> ]] && commits="${BASH_REMATCH[1]}"
commits="$(echo "$commits" | xargs)"
printf "commits: $commits   "

branches="$(grep -A 2 'octicon-git-branch' "$webcache" | tail -n1)"
branches="$(echo "$branches" | xargs)"
printf "branches: $branches  "

x="$(grep -A 2 'octicon-package' "$webcache" | tail -n1)"
x="$(echo "$x" | xargs)"
printf "packages: $x   "

x="$(grep -A 2 'octicon-tag' "$webcache" | tail -n1)"
x="$(echo "$x" | xargs)"
printf "releases: $x   "

x="$(grep -A 2 'octicon-organization' "$webcache" | tail -n1)"
x="$(echo "$x" | xargs)"
printf "contributors: $x"
echo ""

# ---

branch="$(grep -A 1 '<i>Branch:</i>' "$webcache" | tail -n1)"
[[ "$branch" =~ data-menu-button\>(.*)\</span\> ]] && branch="${BASH_REMATCH[1]}"
printf "branch: $branch"
echo ""
echo ""

# ---

x="$(grep 'View all commits by' "$webcache")"
[[ "$x" =~ View\ all\ commits\ by\ .*\"\>(.*)\</a\> ]] && x="${BASH_REMATCH[1]}"
printf "$BOLD$x$RESET "

x="$(grep -A 6 'View all commits by' "$webcache" | tail -n1)"
[[ "$x" =~ \>(.*)\</a\> ]] && x="${BASH_REMATCH[1]}"
printf "$x                       "

x="$(grep 'relative-time' "$webcache")"
[[ "$x" =~ \<relative-time.*\>(.*)\</relative-time\> ]] && x="${BASH_REMATCH[1]}"
printf "$x"

echo ""

hr

