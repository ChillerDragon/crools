#!/bin/bash
#
# linter: shellcheck
# formatter: shfmt

banner() {
	hr
	cat <<-'EOF'
		  __ _ ___  __ _ _ __
		 / _` / __|/ _` | '_ \
		| (_| \__ \ (_| | | | |
		 \__,_|___/\__,_|_| |_|

	EOF
	hr
	echo "users also buy: wjup, ddlint, build, ctidy"
	hr
}

hr() {
	printf '=%.0s' {1..10}
	printf '\n'
}

show_help() {
	echo "TODO: help text"
}

show_usage() {
	echo "TODO: usage text"
}

parse_args() {
	local arg
	while :; do
		[[ "$#" -gt "0" ]] || break

		arg="$1"
		shift

		case "$arg" in
		help | --help | -h)
			show_help
			exit 0
			;;
		*)
			show_usage
			exit 1
			;;
		esac
	done
}

is_ddnet_root() {
	[[ -f ./CMakeLists.txt ]] || return 1
	return 0
}

is_ddnet_build() {
	[[ -d ./CMakeFiles ]] || return 1
	[[ -f ./CMakeCache.txt ]] || return 1
	return 0
}

_nproc() {
	[[ -x "$(command -v nproc)" ]] && nproc || echo 2
}

_cat() {
	if bat -h | grep -qE "(clone with wings|cat\(1\) clone)" &>/dev/null; then
		bat "$1"
		return
	fi
	if batcat -h | grep -qE "(clone with wings|cat\(1\) clone)" &>/dev/null; then
		batcat "$1"
		return
	fi
	batcat -h
	batcat -h | grep "clone with wings"
	echo "file: $1"
	awk '{ print "  " $0 }' "$1"
}

setup_env() {
	if [ ! -f asan.cmd ]; then
		cat <<-EOF >asan.cmd
			export UBSAN_OPTIONS=suppressions=./ubsan.supp:log_path=./SAN:print_stacktrace=1:halt_on_errors=0
			export ASAN_OPTIONS=log_path=./SAN:print_stacktrace=1:check_initialization_order=1:detect_leaks=1:halt_on_errors=0
			export LSAN_OPTIONS=suppressions=./lsan.supp
		EOF
	fi
	_cat asan.cmd
	echo "source asan.cmd"
}

create_or_use_build() {
	if [ -d build-san ]; then
		echo "cd build-san"
		exit 0
	fi
	mkdir -p build-san
	cd build-san || exit 1
	export CC=clang
	export CXX=clang++
	export CXXFLAGS="-fsanitize=address,undefined -fsanitize-recover=address,undefined -fno-omit-frame-pointer"
	export CFLAGS="-fsanitize=address,undefined -fsanitize-recover=address,undefined -fno-omit-frame-pointer"
	cmake -DCMAKE_BUILD_TYPE=Debug ..
	hr
	echo "cd build-san && make -j$(_nproc)"
	setup_env
}

parse_args "$@"

banner

if is_ddnet_root; then
	create_or_use_build
elif is_ddnet_build; then
	setup_env
else
	echo "Error: you have to be in a ddnet code base"
fi
