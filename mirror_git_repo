#!/bin/bash

set -u

ALLOWED_OWNERS=(
	ChillerDragon
	chillavanilla
	discord-irc
	DDNetPP
	TeeworldsDB
	chillerbot
	ChillerData
	ChillerTW
	TwDemosMain
	TwDemosDDrace
	TwDemosMisc
	fddrace
	chidraqul
	chichilku
	OpenTube
	TeeCaptcha
	ZillyWoods
	ZillyInsta
	ZillyFly
)

help() {
	cat <<-EOF
	usage: mirror_git_repo
	description:
	  creates remotes for the git repo in the current folder
	  and push to them
	  for now only gitlab is supported
	  the remote will be named "gl"
	  and it depends on your ssh config having a
	  gitlab-MIRROR entry
	EOF
}

log() {
	printf '[*] %s\n' "$1"
}
err() {
	printf '[-] %s\n' "$1" 1>&2
}
wrn() {
	printf '[!] %s\n' "$1" 1>&2
}

arg="${1:-}"
if [ "${arg}" == "-h" ] || [ "$arg" == "--help" ]
then
	help
	exit 0
fi

is_git_repo() {
	[ -d .git ] || return 1
	return 0
}

check_ssh_config() {
	if grep -q 'Host gitlab-MIRROR' ~/.ssh/config
	then
		return
	fi
	err "Error: this script depends on a 'Host gitlab-MIRROR' entry in your ~/.ssh/config"
	exit 1
}

check_dep() {
	local dep="$1"
	[ -x "$(command -v "$dep")" ] && return

	err "Error: missing dependency '$dep'"
	exit 1
}

check_dep jq
check_dep curl
check_dep ssh-keygen
check_dep git
check_dep awk

# extracts the owner/reponame path from the currently active remote
# the same repository name will be used for mirroring
#
# $ git remote -v
# origin  git@github.com:ChillerDragon/crools (fetch)
# origin  git@github.com:ChillerDragon/crools (push)
#
# would then only return "ChillerDragon/crools"
get_main_remote_path() {
	local candidates
	candidates="$(git remote -v |
		grep -v '^gl[[:space:]]' |
		grep -v '^cb[[:space:]]' |
		grep -v '^upstream[[:space:]]' |
		grep -v '^downstream[[:space:]]' |
		grep -v '^ddnet[[:space:]]' |
		grep ' (push)$' |
		awk '{ print $2 }' |
		cut -d':' -f2)"
	local num_candidates
	num_candidates="$(echo "$candidates" | wc -l)"
	if [ "$num_candidates" -eq 1 ]
	then
		echo "${candidates%.git*}"
		return
	fi
	wrn "Warning: multiple remote candidates found"
	if git remote -v | grep -Eq '^origin[[:space:]]'
	then
		wrn "         assuming origin is the correct one"
		candidates="$(git remote -v |
			grep '^origin[[:space:]]' |
			grep ' (push)$' |
			awk '{ print $2 }' |
			cut -d':' -f2 |
			head -n1)"
	else
		wrn "         taking the head -n1 one :shrug:"
		candidates="$(echo "$candidates" | head -n1)"
	fi
	echo "${candidates%.git*}"
}

check_ssh_key() {
	if [ -f ~/.ssh/ChillerMirror/id_rsa.pub ]
	then
		return
	fi
	err "Error: ssh key not found please run those commands"
	cat <<-EOF

	mkdir -p ~/.ssh/ChillerMirror/
	ssh-keygen -f ~/.ssh/ChillerMirror/id_rsa -N ''

	EOF
	exit 1
}

# @param remote_name
# @param remote_url
set_remote() {
	local remote_name="$1"
	local remote_url="$2"
	local current_remote_url
	current_remote_url="$(git remote -v | grep "^$remote_name[[:space:]]" | awk '{ print $2 }' | head -n1)"
	current_remote_url="${current_remote_url%.git*}"
	remote_url="${remote_url%.git*}"
	if [ "$current_remote_url" = "" ]
	then
		git remote add "$remote_name" "$remote_url"
	elif [ "$current_remote_url" != "$remote_url" ]
	then
		err "Error: a remote with the name $remote_name already exists"
		err "       and it points to something else"
		err ""
		err "   expected: $remote_url"
		err "        got: $current_remote_url"
		err ""
		exit 1
	else
		log "remote $remote_name was already set"
	fi
}

# depends on "git remote -v"
# so needs to be in the right git repo
#
# @param repo_owner
# @param repo_path
push_to_gitlab() {
	local repo_owner="$1"
	local repo_path="$2"
	local gl_remote
	gl_remote="git@gitlab-MIRROR:$repo_owner/$repo_path"
	set_remote gl "$gl_remote"
	if ! git branch | grep -qF '* master'
	then
		err "Error: master branch not found"
		err "       only mirroring master branch"
		err "       is supported for now"
		exit 1
	fi
	if ! git push gl master
	then
		err "Error: failed to push to $gl_remote"
		exit 1
	fi
	log "Code is now backed up to https://gitlab.com/$repo_owner/$repo_path"
}

# depends on env var CODEBERG_TOKEN to be set
# and it needs scope repository:write, user:write and organization:write
#
# @param repo_owner
# @param repo_path
#
# prints ssh_url to stdout
# or errors to stderr
create_codeberg_repo() {
	local repo_owner="$1"
	local repo_path="$2"
	if [ "$CODEBERG_TOKEN" = "" ]
	then
		err "Error: CODEBERG_TOKEN not set"
		err "       you can get one from here https://codeberg.org/user/settings/applications"
		err "       add this to your shellrc:"
		err ""
		err " export CODEBERG_TOKEN=42af..."
		err ""
		return
	fi

	local response
	response="$(curl \
		--silent \
		-H 'Content-Type: application/json' \
		-H "Authorization: Bearer $CODEBERG_TOKEN" \
		"https://codeberg.org/api/v1/repos/$repo_owner/$repo_path")"
	local errors
	errors="$(jq .errors <<< "$response")"
	if [ "$errors" != "" ] && [ "$errors" != null ]
	then
		err "Error: got errors"
		jq . <<< "$response" 1>&2
	fi
	local message
	message="$(jq .message <<< "$response")"
	if [ "$message" = "The target couldnt be found." ]
	then
		test
	fi
	local ssh_url
	ssh_url="$(jq -r .ssh_url <<< "$response")"
	if [ "$ssh_url" != "" ] && [ "$ssh_url" != null ]
	then
		# codeberg repo already exists
		printf "%s" "$ssh_url"
		return
	fi

	local json_payload
	# https://codeberg.org/api/swagger#/repository/createCurrentUserRepo
	if ! json_payload="$(jq -n \
		--arg auto_init false \
		--arg default_branch master \
		--arg description "" \
		--arg name "$repo_path" \
		--arg private true \
		--arg trust_model default \
		'$ARGS.named' | sed -e 's/"true"/true/g' -e 's/"false"/false/g')"
	then
		err "Error: failed to build json for codeberge repo creation"
		err "       failed to create repo at path $repo_path"
		exit 1
	fi
	if ! printf '%s' "$json_payload" | jq . >/dev/null
	then
		err "Error: generated invalid json for codeberg repo creation"
		err "       failed to create repo at path $repo_path"
		exit 1
	fi
	# ChillerDragon -> ChillerMirror user
	# all others are assumed to be orgs with the same name
	local post_url="https://codeberg.org/api/v1/orgs/$repo_owner/repos"
	if [ "$repo_owner" = ChillerDragon ] || [ "$repo_owner" = ChillerMirror ]
	then
		post_url='https://codeberg.org/api/v1/user/repos'
	fi
	response="$(curl \
		--silent \
		-X POST \
		-H 'Content-Type: application/json' \
		-H "Authorization: Bearer $CODEBERG_TOKEN" \
		--data "$json_payload" \
		"$post_url")"

	local message
	message="$(jq .message <<< "$response")"
	if [ "$message" = "The repository with the same name already exists." ]
	then
		err "Error: repository already exists."
		err "       this should not happen because we check for existance before"
		err "       maybe this was a race condition please try again"
		exit 1
	fi

	local repo_id
	repo_id="$(jq .id <<< "$response")"
	if [ "$repo_id" = null ] || [ "$repo_id" = "" ]
	then
		err "Error: failed to get repository id. Codeberg repo creation failed."
		err "       failed to create repo at path $repo_path"
		jq . <<< "$response" 1>&2
		exit 1
	fi
	local ssh_url
	ssh_url="$(jq -r .ssh_url <<< "$response")"
	if [ "$ssh_url" = null ] || [ "$ssh_url" = "" ]
	then
		err "Error: failed to get repository ssh_url. Codeberg repo creation failed."
		err "       failed to create repo at path $repo_path"
		jq . <<< "$response" 1>&2
		exit 1
	fi
	printf '%s' "$ssh_url"
}


# @param repo_owner
# @param repo_path
push_to_codeberg() {
	local repo_owner="$1"
	local repo_path="$2"
	if ! ssh_url="$(create_codeberg_repo "$repo_owner" "$repo_path")"
	then
		exit 1
	fi
	if [ "$ssh_url" = "" ]
	then
		exit 1
	fi
	ssh_url="git@codeberg-MIRROR:$(printf '%s' "$ssh_url" | cut -d':' -f2-)"
	set_remote cb "$ssh_url"
	if ! git branch | grep -qF '* master'
	then
		err "Error: master branch not found"
		err "       only mirroring master branch"
		err "       is supported for now"
		exit 1
	fi
	if ! git push cb master
	then
		err "Error: failed to push to cb remote"
		exit 1
	fi
	log "Code is now backed up to https://codeberg.org/$repo_owner/$repo_path"
}

# check if the owner is in the ALLOWED_OWNERS list
# usage:
#
# is_whitelisted_owner FOOBAR && echo whitelisted
#
# @param owner - the github name of the user or org
is_whitelisted_owner() {
	local owner="$1"
	local whitelisted
	for whitelisted in "${ALLOWED_OWNERS[@]}"
	do
		[ "$whitelisted" = "$owner" ] && return 0
	done
	return 1
}

main() {
	if ! is_git_repo
	then
		err "Error: your current directory is not a git repo"
		exit 1
	fi
	check_ssh_config
	check_ssh_key
	local remote_path
	remote_path="$(get_main_remote_path)"
	local remote_owner
	remote_owner="$(echo "$remote_path" | cut -d'/' -f1)"
	if ! is_whitelisted_owner "$remote_owner"
	then
		err "Error: this repository is not owned by one of the whitelisted owners"
		err "       currently only mirroring from whitlisted groups/users owned repos"
		err "       is supported"
		err ""
		err "    expected: ${ALLOWED_OWNERS[*]}"
		err "         got: $remote_owner"
		err ""
		exit 1
	fi
	local repo_path
	repo_path="$(echo "$remote_path" | cut -d'/' -f2-)"
	if echo "$repo_path" | grep -qF '/'
	then
		err "Error: the repository name contains slashes that is not supported yet"
		exit 1
	fi
	if [ "$repo_path" = "" ]
	then
		err "Error: the repository path is empty something went wrong"
		exit 1
	fi

	local repo_owner="$remote_owner"
	if [ "$repo_owner" = ChillerDragon ]
	then
		repo_owner=ChillerMirror
	fi

	push_to_gitlab "$repo_owner" "$repo_path"
	push_to_codeberg "$repo_owner" "$repo_path"
}

main

