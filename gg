#!/bin/bash

cat << 'LOGO'
       _ _                 _   
  __ _(_) |_    __ _ _   _| |_ 
 / _` | | __|  / _` | | | | __|
| (_| | | |_  | (_| | |_| | |_ 
 \__, |_|\__|  \__, |\__,_|\__|
 |___/         |___/           

LOGO

readonly reset="\e[0m"
# readonly black="\e[0;30m";   
# readonly red="\e[0;31m";     
# readonly green="\e[0;32m";   
# readonly yellow="\e[0;33m";  
# readonly blue="\e[0;34m";    
# readonly magenta="\e[0;35m";
# readonly cyan="\e[0;36m";    
# readonly white="\e[0;37m";   

# readonly BLACK="\e[1;30m"
# readonly RED="\e[1;31m"
# readonly GREEN="\e[1;32m"
# readonly YELLOW="\e[1;33m"
# readonly BLUE="\e[1;34m"
# readonly MAGENTA="\e[1;35m"
# readonly CYAN="\e[1;36m"
readonly WHITE="\e[1;37m"



function usage() {
	echo "usage: gg <repo>"
	echo "description:"
	echo "  will merge the selected repo with its upstream"
	echo "respos:"
	echo "  zx|chillerbot-zx"
	echo "  zb|chillerbot-zx twbl bots"
	echo "  ux|chillerbot-ux"
	echo "  cg|CarryGores"
	echo "  di|ddnet-insta"
	echo "  ddpp|ddnetpp|ddnet++"
	echo "  ddnet++ twbl bots"
}

function err() {
	printf "[-] Error: %b\n" "$1" 1>&2
}

function fail() {
	err "$1"
	exit 1
}

function update_generic() {
	# upstream remote and local branch need same name
	# remote (ddnet) should be located on branch (ddnet)
	# $ git fetch ddnet
	# $ git checkout ddnet && git reset --hard ddnet/master
	local upstream_remote
	local upstream_branch
	local branch
	local origin
	upstream_remote="$(echo "$1" | cut -d '=' -f2-)"
	upstream_branch="$(echo "$2" | cut -d '=' -f2-)"
	branch="$(echo "$3" | cut -d '=' -f2-)"
	origin="$(echo "$4" | cut -d '=' -f2-)"
	if [ -f .git ]
	then
		echo "[!!!] woah there cowboy found .git file!"
		echo "[!!!] is this a submodule??"
		echo "[!!!] i hope you know what you are doing ..."
	else
		if [ ! -d ./.git/ ] && [ ! -d ../.git/ ]
		then
			echo "not a git dir"
			return
		fi
	fi
	if ! git remote -v | grep origin | grep -q "$origin"
	then
		echo "not $origin remote"
		return
	fi
	git checkout "$branch" || fail "${WHITE}git checkout $branch${reset} failed"
	git pull || fail "${WHITE}git pull${reset} failed"
	git fetch "$upstream_remote" || fail "${WHITE}git fetch $upstream_remote${reset} failed"
	if ! git checkout "$upstream_remote"
	then
		err "You need a local branch that matches the upstream remote name"
		err "In your case you need a branch called $WHITE$upstream_remote"
		fail "${WHITE}git checkout $upstream_remote${reset} failed"
	fi
	git reset --hard "$upstream_remote/$upstream_branch" || fail "${WHITE}git reset --hard $upstream_remote/$upstream_branch${reset} failed"
	git submodule update || fail "${WHITE}git submodule update${reset} failed"
	git push || fail "${WHITE}git push${reset} failed"
	git checkout "$branch" || fail "${WHITE}git checkout $branch${reset} failed"
	git merge --no-edit "$upstream_remote" || fail "${WHITE}git merge --no-edit $upstream_remote${reset} failed"
	git submodule update || fail "${WHITE}git submodule update${reset} failed"
}

function update_generic_tw() {
	local commit
	if ! commit="$(git rev-parse HEAD)"
	then
		echo "Error: failed to get commit"
	fi
	update_generic "$@"
	if [ "$(git rev-parse HEAD)" != "$commit" ]
	then
		echo "[*] new commit $commit -> $(git rev-parse HEAD) (building)"
		cd build || exit 1
		make -j"$(nproc)" || exit 1
	fi
}

function update_zx() {
	cd ~/Desktop/git/chillerbot-zx || exit 1
	update_generic_tw \
		upstream_remote=ux \
		upstream_branch=chillerbot \
		branch=zx \
		origin=chillerbot-zx
}

function update_zx_twbl() {
	cd ~/Desktop/git/chillerbot-zx/src/external/chillerbot-twbl || exit 1
	update_generic_tw \
		upstream_remote=twbl\
		upstream_branch=master \
		branch=master \
		origin=chillerbot-twbl
}

function update_ux() {
	cd ~/Desktop/git/chillerbot-ux || exit 1
	update_generic_tw \
		upstream_remote=ddnet \
		upstream_branch=master \
		branch=chillerbot \
		origin=chillerbot-ux
}

function update_carrygores() {
	cd ~/Desktop/git/CarryGores || exit 1
	update_generic_tw \
		upstream_remote=ddnet \
		upstream_branch=master \
		branch=master \
		origin=CarryGores
}

function update_ddnet_insta() {
	cd ~/Desktop/git/ddnet-insta || exit 1
	update_generic_tw \
		upstream_remote=ddnet \
		upstream_branch=master \
		branch=insta \
		origin=ddnet-insta
}

function update_ddnetpp() {
	cd ~/Desktop/git/DDNetPP || exit 1
	update_generic_tw \
		upstream_remote=ddnet \
		upstream_branch=master \
		branch=master \
		origin=DDNetPP
}

function update_ddpp_twbl() {
	cd ~/Desktop/git/DDNetPP/src/external/DDNetPP-bots || exit 1
	update_generic_tw \
		upstream_remote=twbl\
		upstream_branch=master \
		branch=master \
		origin=DDNetPP-bots
}

function parse_args() {
	local arg
	local dry="$1"
	shift
	for arg in "$@"
	do
		if [[ "$arg" == "--help" ]] || [[ "$arg" == "-h" ]]
		then
			usage
			exit
		elif [[ "$arg" == "zx" ]] || [[ "$arg" == "chillerbot-zx" ]]
		then
			if [[ "$dry" != "dry" ]]
			then
				update_zx
			fi
		elif [[ "$arg" == "zb" ]] || [[ "$arg" == "chillerbot-zx twbl bots" ]]
		then
			if [[ "$dry" != "dry" ]]
			then
				update_zx_twbl
			fi
		elif [[ "$arg" == "ux" ]] || [[ "$arg" == "chillerbot-ux" ]]
		then
			if [[ "$dry" != "dry" ]]
			then
				update_ux
			fi
		elif [[ "$arg" == "cg" ]] || [[ "${arg,,}" == "carrygores" ]]
		then
			if [[ "$dry" != "dry" ]]
			then
				update_carrygores
			fi
		elif [[ "$arg" == "di" ]] || [[ "$arg" == "ddnet-insta" ]]
		then
			if [[ "$dry" != "dry" ]]
			then
				update_ddnet_insta
			fi
		elif [[ "$arg" == "ddpp" ]] || [[ "$arg" == "ddnetpp" ]] || [[ "$arg" == "ddnet++" ]] || [[ "$arg" == "DDNetPP (ddnet++)" ]]
		then
			if [[ "$dry" != "dry" ]]
			then
				update_ddnetpp
			fi
		elif [[ "$arg" == "ddnet++ twbl bots" ]]
		then
			if [[ "$dry" != "dry" ]]
			then
				update_ddpp_twbl
			fi
		else
			echo "Error: invalid repo '$arg'"
			exit 1
		fi
	done
}

if [ "$#" == "0" ]
then
	if [ -x "$(command -v fzf)" ]
	then
		repos="chillerbot-zx\n"
		repos="chillerbot-zx twbl bots\n"
		repos+="chillerbot-ux\n"
		repos+="CarryGores\n"
		repos+="ddnet-insta\n"
		repos+="DDNetPP (ddnet++)\n"
		repos+="ddnet++ twbl bots"
		repo="$(echo -e "$repos" | fzf)"
		parse_args wet "$repo"
	else
		usage
	fi
	exit
fi

parse_args dry "$@"
parse_args wet "$@"

